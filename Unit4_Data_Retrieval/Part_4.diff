diff -BburN Part_3_Final/AndroidManifest.xml Part_4_Final/AndroidManifest.xml
--- Part_3_Final/AndroidManifest.xml	2012-08-15 09:33:09.000000000 +0100
+++ Part_4_Final/AndroidManifest.xml	2012-08-15 17:26:13.000000000 +0100
@@ -54,6 +54,17 @@
         <service
             android:name=".NetworkDownloadService"
             android:exported="false" />
+        
+        <!-- 
+        Implements a database that locally stores data read from the web for offline
+        viewing or something.
+        -->
+        <provider
+            android:name=".PicasaProvider" 
+            android:exported="false"
+            android:authorities="@string/picasa_authority"
+        />
+
     </application>
 
 </manifest>
\ No newline at end of file
diff -BburN Part_3_Final/res/values/strings.xml Part_4_Final/res/values/strings.xml
--- Part_3_Final/res/values/strings.xml	2012-08-15 09:33:10.000000000 +0100
+++ Part_4_Final/res/values/strings.xml	2012-08-15 17:26:13.000000000 +0100
@@ -4,4 +4,8 @@
     <string name="title_pic_detail">Pic Detail</string>
     <string name="title_pic_list">dp</string>
 
+    <string name="picasa_authority" translatable="false">com.example.acamp.authority.PicasaProvider</string>
+    <string name="picasa_faves_table" translatable="false">faves</string>
+    <string name="application_data_table" translatable="false">data</string>
+    
 </resources>
\ No newline at end of file
diff -BburN Part_3_Final/src/com/example/acamp/dip/Constants.java Part_4_Final/src/com/example/acamp/dip/Constants.java
--- Part_3_Final/src/com/example/acamp/dip/Constants.java	2012-08-15 09:33:10.000000000 +0100
+++ Part_4_Final/src/com/example/acamp/dip/Constants.java	2012-08-15 17:26:13.000000000 +0100
@@ -4,6 +4,8 @@
     static public final boolean LOGV = true;
     public static final String IMAGE_THUMB_URL = "thumbURL";
     public static final String IMAGE_URL = "imageURL";
-    private static final int NUM_LINES = 10;
+    public static final int NUM_LINES = 10;
     public static final String PICASA_RSS_URL = "http://picasaweb.google.com/data/feed/base/featured?alt=rss&kind=photo&access=public&slabel=featured&hl=en_US&imgmax=1024&max-results=10";   
+    public static final String PREFS_GROUP = "FiveDpPrefs";
+    public static final String LAST_ITEM_KEY = "ItemId";
 }
diff -BburN Part_3_Final/src/com/example/acamp/dip/NetworkDownloadService.java Part_4_Final/src/com/example/acamp/dip/NetworkDownloadService.java
--- Part_3_Final/src/com/example/acamp/dip/NetworkDownloadService.java	2012-08-15 09:33:10.000000000 +0100
+++ Part_4_Final/src/com/example/acamp/dip/NetworkDownloadService.java	2012-08-15 17:26:13.000000000 +0100
@@ -10,8 +10,6 @@
 
 import org.xmlpull.v1.XmlPullParserException;
 
-import com.example.acamp.dip.dummy.DummyContent;
-
 import android.app.IntentService;
 import android.content.ContentValues;
 import android.content.Intent;
@@ -21,7 +19,6 @@
 public class NetworkDownloadService extends IntentService {
 
     public static final String LOG_TAG = "PicasaService";
-    private static final boolean NO_NETWORK_TEST = false;
 
     // a reasonable user-agent string
     private static final String USER_AGENT = "Mozilla/5.0 (Linux; U; Android "
@@ -53,8 +50,6 @@
                 localHttpURLConnection.setRequestProperty("User-Agent",
                         USER_AGENT);
 
-                boolean bInsert;
-                    bInsert = true;
 
                 int responseCode = localHttpURLConnection.getResponseCode();
                 switch (responseCode) {
@@ -64,23 +59,17 @@
                     localPicasaPullParser.parseXml(
                             localURLConnection.getInputStream());
 
-// TODO: Uncomment to update ListView
-                    Intent intent = new Intent();
-                    intent.setAction(DummyContent.ACTION_UPDATE);
-                    sendBroadcast(intent);
-
-// TODO: Uncomment to populate ContentProvider
-//                    Vector<ContentValues> cvv = localPicasaPullParser
-//                            .getImages();
-//
-//                    int size = cvv.size();
-//                    ContentValues[] cvArray = new ContentValues[size];
-//                    cvArray = cvv.toArray(cvArray);
-//                    
-//                    getContentResolver().bulkInsert(
-//                            PicasaContentDB.getUriByType(this,
-//                                    PicasaContentDB.METADATA_QUERY), cvArray);
-//                    }
+                    Vector<ContentValues> cvv = localPicasaPullParser
+                            .getImages();
+
+                    int size = cvv.size();
+                    ContentValues[] cvArray = new ContentValues[size];
+                    cvArray = cvv.toArray(cvArray);
+                    
+                    getContentResolver().bulkInsert(
+                            PicasaProvider.getUriByType(this,
+                                    PicasaProvider.METADATA_QUERY), cvArray);
+                    
                     break;
                 case 304:
                     Log.d(LOG_TAG, "Response not modified.");
diff -BburN Part_3_Final/src/com/example/acamp/dip/PicDetailFragment.java Part_4_Final/src/com/example/acamp/dip/PicDetailFragment.java
--- Part_3_Final/src/com/example/acamp/dip/PicDetailFragment.java	2012-08-15 09:33:10.000000000 +0100
+++ Part_4_Final/src/com/example/acamp/dip/PicDetailFragment.java	2012-08-15 17:26:13.000000000 +0100
@@ -6,10 +6,14 @@
 import java.net.URL;
 import java.util.concurrent.ExecutionException;
 
+import android.content.ContentResolver;
+import android.content.ContentUris;
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
@@ -19,13 +23,13 @@
 import android.view.ViewGroup;
 import android.widget.ImageView;
 
-import com.example.acamp.dip.dummy.DummyContent;
+import com.example.acamp.dip.PicasaProvider.PicasaFeatured;
 
 public class PicDetailFragment extends Fragment {
 
     public static final String ARG_ITEM_ID = "item_id";
 
-    DummyContent.DummyItem mItem;
+    long mId = -1;
     ImageView mImageView;
 
     public PicDetailFragment() {
@@ -35,14 +39,12 @@
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         if (getArguments().containsKey(ARG_ITEM_ID)) {
-            mItem = DummyContent.ITEM_MAP.get(getArguments().getString(ARG_ITEM_ID));
+            mId = getArguments().getLong(ARG_ITEM_ID, -1);
         } else {
-            SharedPreferences sp =
-                    getActivity().getSharedPreferences(DummyContent.PREFS_GROUP,
-                            Context.MODE_PRIVATE);
-            String lastItemKey = sp.getString(DummyContent.LAST_ITEM_KEY, "");
-            if (!TextUtils.isEmpty(lastItemKey)) {
-                mItem = DummyContent.ITEM_MAP.get(lastItemKey);
+            SharedPreferences sp = getActivity().getSharedPreferences(Constants.PREFS_GROUP, Context.MODE_PRIVATE);
+            long lastItemKey = sp.getLong(Constants.LAST_ITEM_KEY, -1);
+            if (lastItemKey > 0) {
+                mId = lastItemKey;
             }
         }
     }
@@ -53,7 +55,7 @@
         View rootView = inflater.inflate(R.layout.fragment_pic_detail, container, false);
         mImageView = (ImageView) rootView.findViewById(R.id.pic_detail_pic);
 
-        if (mItem != null) {
+        if (mId > 0) {
 
             if (mImageView != null) {
 
@@ -64,7 +66,7 @@
                 // does not run on the UI thread, so we don't need to do this in
                 // an AsyncTask.
                 try {
-                    b = git.execute(mItem.content).get();
+                    b = git.execute(mId).get();
                     mImageView.setImageBitmap(b);
                 } catch (InterruptedException e) {
                     // TODO Auto-generated catch block
@@ -78,15 +80,32 @@
         return rootView;
     }
 
-    public final class GetImageTask extends AsyncTask<String, Void, Bitmap> {
+    public final class GetImageTask extends AsyncTask<Long, Void, Bitmap> {
 
         @Override
-        protected Bitmap doInBackground(String... params) {
-            String picUrlStr = params[0];
+        protected Bitmap doInBackground(Long... params) {
+            String picUrlStr = null;
             URL picUrl;
             InputStream is;
             Bitmap b = null;
 
+            // Inherit context and content resolver from containing Activity.
+            Context context = getActivity();
+            ContentResolver cr = context.getContentResolver();
+            
+            // Compose a content URI and access the content resolver, specifically
+            // seeking the row matching the ID passed in through params.
+            Uri singleUri = ContentUris.withAppendedId(PicasaProvider.getUriByType(context, PicasaProvider.METADATA_QUERY), params[0]);
+            Cursor cursor = cr.query(singleUri, PicasaProvider.PicasaFeatured.PROJ_LONG_URL, null, null, null);
+   
+            // Fetch the content out of the result cursor.
+            // NOTE!  Do not just use magic numbers to get the
+            // columns.  Better to look up by name.
+            if ((cursor != null) && (cursor.getCount() > 0)) {
+                cursor.moveToFirst();
+                picUrlStr = cursor.getString(cursor.getColumnIndex(PicasaFeatured.IMAGE_URL));
+            }            
+
             if (TextUtils.isEmpty(picUrlStr)) {
                 return null;
             }
diff -BburN Part_3_Final/src/com/example/acamp/dip/PicListActivity.java Part_4_Final/src/com/example/acamp/dip/PicListActivity.java
--- Part_3_Final/src/com/example/acamp/dip/PicListActivity.java	2012-08-15 09:33:10.000000000 +0100
+++ Part_4_Final/src/com/example/acamp/dip/PicListActivity.java	2012-08-15 17:26:13.000000000 +0100
@@ -13,7 +13,7 @@
 public class PicListActivity extends FragmentActivity implements PicListFragment.Callbacks {
 
     private boolean mTwoPane;
-    private String mItemSelected;
+    private long mItemSelected;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
@@ -34,20 +34,20 @@
         // If two-pane view, then if first launch, try to restore last item viewed
         if (mTwoPane && (savedInstanceState == null)) {
             SharedPreferences sp =
-                    getSharedPreferences(DummyContent.PREFS_GROUP, Context.MODE_PRIVATE);
-            mItemSelected = sp.getString(DummyContent.LAST_ITEM_KEY, "");
-            if (!TextUtils.isEmpty(mItemSelected)) {
+                    getSharedPreferences(Constants.PREFS_GROUP, Context.MODE_PRIVATE);
+            mItemSelected = sp.getLong(Constants.LAST_ITEM_KEY, -1);
+            if (mItemSelected > 0) {
                 this.onItemSelected(mItemSelected);
             }
         }
     }
 
     @Override
-    public void onItemSelected(String id) {
+    public void onItemSelected(long id) {
         mItemSelected = id;
         if (mTwoPane) {
             Bundle arguments = new Bundle();
-            arguments.putString(PicDetailFragment.ARG_ITEM_ID, id);
+            arguments.putLong(PicDetailFragment.ARG_ITEM_ID, id);
             PicDetailFragment fragment = new PicDetailFragment();
             fragment.setArguments(arguments);
             getSupportFragmentManager().beginTransaction().replace(R.id.pic_detail_container,
@@ -62,11 +62,11 @@
 
     @Override
     protected void onStop() {
-        if (!TextUtils.isEmpty(mItemSelected)) {
+        if (mItemSelected > 0) {
             SharedPreferences sp =
-                    getSharedPreferences(DummyContent.PREFS_GROUP, Context.MODE_PRIVATE);
+                    getSharedPreferences(Constants.PREFS_GROUP, Context.MODE_PRIVATE);
             Editor spe = sp.edit();
-            spe.putString(DummyContent.LAST_ITEM_KEY, mItemSelected);
+            spe.putLong(Constants.LAST_ITEM_KEY, mItemSelected);
             spe.commit();
         }
         super.onStop();
diff -BburN Part_3_Final/src/com/example/acamp/dip/PicListFragment.java Part_4_Final/src/com/example/acamp/dip/PicListFragment.java
--- Part_3_Final/src/com/example/acamp/dip/PicListFragment.java	2012-08-15 09:33:10.000000000 +0100
+++ Part_4_Final/src/com/example/acamp/dip/PicListFragment.java	2012-08-15 17:26:13.000000000 +0100
@@ -1,40 +1,35 @@
 package com.example.acamp.dip;
 
-import android.R;
 import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
+import android.database.Cursor;
 import android.os.Bundle;
 import android.support.v4.app.ListFragment;
+import android.support.v4.app.LoaderManager;
+import android.support.v4.content.CursorLoader;
+import android.support.v4.content.Loader;
+import android.support.v4.widget.SimpleCursorAdapter;
 import android.view.View;
-import android.widget.ArrayAdapter;
 import android.widget.ListView;
 
-import com.example.acamp.dip.dummy.DummyContent;
-import com.example.acamp.dip.dummy.DummyContent.DummyItem;
+public class PicListFragment extends ListFragment  implements
+LoaderManager.LoaderCallbacks<Cursor> {
 
-public class PicListFragment extends ListFragment {
+    // This is the Adapter being used to provision the list's data.
+    SimpleCursorAdapter mAdapter;
 
     private static final String STATE_ACTIVATED_POSITION = "activated_position";
 
     private Callbacks mCallbacks = sDummyCallbacks;
     private int mActivatedPosition = ListView.INVALID_POSITION;
 
-    // Instantiate a Broadcast Receiver so that the Network Download Service
-    // can message the List Fragment that the array backing the ListView has
-    // been updated.
-    private BroadcastReceiver mReceiver;
     
     public interface Callbacks {
-
-        public void onItemSelected(String id);
+        public void onItemSelected(long id);
     }
 
     private static Callbacks sDummyCallbacks = new Callbacks() {
         @Override
-        public void onItemSelected(String id) {
+        public void onItemSelected(long id) {
         }
     };
 
@@ -44,31 +39,22 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        setListAdapter(new ArrayAdapter<DummyContent.DummyItem>(getActivity(),
-                R.layout.simple_list_item_activated_1,
-                R.id.text1,
-                DummyContent.ITEMS));
-        
-        // Set up the broadcast mReceiver so that the ArrayAdapter can update.
-        IntentFilter filter = new IntentFilter();
-        filter.addAction(DummyContent.ACTION_UPDATE);
-
-        mReceiver = new BroadcastReceiver() {
-            @Override
-            public void onReceive(Context context, Intent intent) {
-                @SuppressWarnings("unchecked")
-                ArrayAdapter<DummyContent.DummyItem> aa = (ArrayAdapter<DummyItem>) getListAdapter();
-                aa.notifyDataSetChanged();
-            }
-          };
-          getActivity().registerReceiver(mReceiver, filter);
+        // Create an empty adapter we will use to display the loaded data.
+        mAdapter = new SimpleCursorAdapter(
+                getActivity(), 
+                android.R.layout.simple_list_item_activated_1, 
+                null,
+                new String[] { PicasaProvider.PicasaFeatured._ID }, 
+                new int[] { android.R.id.text1 },
+                0
+        );
+        setListAdapter(mAdapter);
+        
+        // Prepare the loader. Either re-connect with an existing one,
+        // or start a new one.
+        getLoaderManager().initLoader(0, null, this);
     }
 
-    @Override
-    public void onDestroy() {
-        getActivity().unregisterReceiver(mReceiver);
-        super.onDestroy();
-    }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
@@ -98,7 +84,7 @@
     @Override
     public void onListItemClick(ListView listView, View view, int position, long id) {
         super.onListItemClick(listView, view, position, id);
-        mCallbacks.onItemSelected(DummyContent.ITEMS.get(position).id);
+        mCallbacks.onItemSelected(id);
     }
 
     @Override
@@ -124,4 +110,23 @@
 
         mActivatedPosition = position;
     }
+
+    @Override
+    public Loader<Cursor> onCreateLoader(int loaderId, Bundle bundle) {
+        CursorLoader cl = new CursorLoader(getActivity());
+        cl.setUri(PicasaProvider.getUriByType(getActivity(), PicasaProvider.METADATA_QUERY));
+        cl.setProjection(PicasaProvider.PicasaFeatured.PROJ_LONG_URL);
+        return cl;
+    }
+
+    @Override
+    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {
+        mAdapter.swapCursor(cursor);
+        setListShown(true);
+    }
+
+    @Override
+    public void onLoaderReset(Loader<Cursor> loader) {
+        mAdapter.swapCursor(null);
+    }
 }
diff -BburN Part_3_Final/src/com/example/acamp/dip/PicasaProvider.java Part_4_Final/src/com/example/acamp/dip/PicasaProvider.java
--- Part_3_Final/src/com/example/acamp/dip/PicasaProvider.java	1970-01-01 01:00:00.000000000 +0100
+++ Part_4_Final/src/com/example/acamp/dip/PicasaProvider.java	2012-08-15 17:26:13.000000000 +0100
@@ -0,0 +1,289 @@
+package com.example.acamp.dip;
+
+import android.content.ContentProvider;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.Intent;
+import android.content.UriMatcher;
+import android.database.Cursor;
+import android.database.DatabaseUtils;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.net.Uri;
+import android.provider.BaseColumns;
+import android.util.Log;
+import android.util.SparseArray;
+
+
+public class PicasaProvider extends ContentProvider {
+
+    // Who says? I say.
+    public static final String LOG_TAG = PicasaProvider.class.getName();
+
+    // Handle to a new DatabaseHelper.
+    SQLiteOpenHelper mHelper;
+    // Uri matcher to decode incoming URIs.
+    private UriMatcher mUriMatcher;
+    // MIME types that apply to the results of queries
+    SparseArray<String> mMimeTypes;
+
+    // The incoming URI matches the main table URI pattern
+    public static final int METADATA_QUERY = 1;
+    // The incoming URI matches the main table row ID URI pattern
+    public static final int METADATA_QUERY_ID = 2;
+
+    private static final String ITEM_PATTERN = "/#";
+
+    @Override
+    public boolean onCreate() {
+
+        mUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
+        mMimeTypes = new SparseArray<String>();
+
+        String authority = getContext().getString(R.string.picasa_authority);
+        mHelper = new PicasaFeatured.PicasaContentDBHelper(getContext());
+
+        
+        /*
+         * Standard Android mime types using the vnd (vendor-specific) mime type
+         * vnd.android.cursor.dir/vnd.[authority].[table] for a table or
+         * vnd.android.cursor.item/vnd.[authority].[table] for a single item
+         */
+
+        String table = getContext().getString(R.string.picasa_faves_table);
+        mUriMatcher.addURI(authority, table, METADATA_QUERY);
+        mUriMatcher.addURI(authority, table + ITEM_PATTERN, METADATA_QUERY_ID);
+
+        mMimeTypes.put(METADATA_QUERY, "vnd.android.cursor.dir/vnd." + authority + "." + table);
+        mMimeTypes.put(METADATA_QUERY_ID, "vnd.android.cursor.item/vnd." + authority + "." + table);
+
+        return true;
+    }
+
+    public static boolean initialized;
+
+    static {
+        initialized = false;
+    }
+    
+    public static void Init(Context context) {
+        if (!initialized) {
+            
+            // adapted from Picasa sample
+            Intent initIntent = new Intent(context, NetworkDownloadService.class);
+            Uri localUri = Uri.parse(Constants.PICASA_RSS_URL);
+            initIntent.setData(localUri);
+            context.startService(initIntent);
+
+            initialized = true;
+        }
+    }
+
+    @Override
+    public int delete(Uri uri, String selection, String[] selectionArgs) {
+
+        // Get a reference to the database.
+        SQLiteDatabase db = mHelper.getWritableDatabase();
+
+        // Number of rows matching selector.
+        int count = 0;
+
+        switch (mUriMatcher.match(uri)) {
+            case METADATA_QUERY: {
+                // If URI is main table, delete uses incoming where clause and args.
+                count = db.delete(PicasaFeatured.TABLE_NAME, selection, selectionArgs);
+                break;
+            }
+
+            case METADATA_QUERY_ID: {
+                // If URI is for a particular row ID, delete is based on incoming
+                // data but modified to restrict to the given ID. Modifies the where
+                // clause to restrict it to the particular note ID.
+                String finalWhere =
+                        DatabaseUtils.concatenateWhere(PicasaFeatured._ID + " = "
+                                + ContentUris.parseId(uri), selection);
+
+                // Delete the row(s) from the database.
+                // There should only be either 0 or 1 matching row.
+                count = db.delete(PicasaFeatured.TABLE_NAME, finalWhere, selectionArgs);
+                break;
+            }
+            default:
+                throw new IllegalArgumentException("Unknown URI " + uri);
+        }
+
+        // Notify any clients referring to this content provider.
+        getContext().getContentResolver().notifyChange(uri, null);
+
+        return count;
+    }
+
+    @Override
+    public String getType(Uri uri) {
+        return mMimeTypes.get(mUriMatcher.match(uri));
+    }
+
+    static public Uri getUriByType(Context cxt, int type) {
+        String authority = cxt.getString(R.string.picasa_authority);
+        Uri authorityUri = Uri.parse("content://" + authority);
+        switch (type) {
+        case METADATA_QUERY:
+            return Uri.withAppendedPath(authorityUri,
+                    cxt.getString(R.string.picasa_faves_table));
+        }
+        return null;
+    }
+
+    @Override
+    public Uri insert(Uri uri, ContentValues values) {
+        switch (mUriMatcher.match(uri)) {
+            case METADATA_QUERY: {
+                SQLiteDatabase localSQLiteDatabase = this.mHelper.getWritableDatabase();
+                long id = localSQLiteDatabase.insert(PicasaFeatured.TABLE_NAME, null, values);
+                if (id > 0) {
+                    getContext().getContentResolver().notifyChange(uri, null);
+                    return Uri.withAppendedPath(uri, Long.toString(id));
+                }
+                break;
+            }
+
+            default:
+                break;
+        }
+        throw new SQLException("Failed to insert row into " + uri);
+    }
+
+    @Override
+    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
+            String sortOrder) {
+        Cursor returnCursor = null;
+        switch (mUriMatcher.match(uri)) {
+            case METADATA_QUERY:
+            {
+                // If the incoming URI is for whole table.
+                returnCursor = getFeaturedImages(projection);
+                returnCursor.setNotificationUri(getContext().getContentResolver(), uri);
+                break;
+            }
+            case METADATA_QUERY_ID:
+            {
+                // The incoming URI is for a single row.
+                // Construct a new query builder and sets its table name.
+                SQLiteDatabase db = mHelper.getReadableDatabase();
+                
+                // If URI is for a particular row ID, update is based on incoming
+                // data but modified to restrict to the given ID.
+                String finalWhere =
+                        DatabaseUtils.concatenateWhere(PicasaFeatured._ID + " = "
+                                + ContentUris.parseId(uri), selection);
+
+                returnCursor = db.query(PicasaFeatured.TABLE_NAME, projection, finalWhere, selectionArgs, null, null, null);
+                break;
+            }
+        }
+
+        return returnCursor;
+    }
+
+    public Cursor getFeaturedImages(String[] projection) {
+        return this.mHelper.getReadableDatabase().query(PicasaFeatured.TABLE_NAME, projection,
+                null, null, null, null, null);
+    }
+
+    @Override
+    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
+
+        SQLiteDatabase localSQLiteDatabase = mHelper.getWritableDatabase();
+
+        // Number of rows matching selector.
+        int count = 0;
+
+        switch (mUriMatcher.match(uri)) {
+            case METADATA_QUERY: {
+                // If URI is main table, update uses incoming where clause and args.
+                count =
+                        localSQLiteDatabase.update(PicasaFeatured.TABLE_NAME, values, selection,
+                                selectionArgs);
+                break;
+            }
+            case METADATA_QUERY_ID: {
+                // If URI is for a particular row ID, update is based on incoming
+                // data but modified to restrict to the given ID.
+                String finalWhere =
+                        DatabaseUtils.concatenateWhere(PicasaFeatured._ID + " = "
+                                + ContentUris.parseId(uri), selection);
+
+                // Update the row(s) from the database.
+                // There should only be either 0 or 1 matching row.
+                count =
+                        localSQLiteDatabase.update(PicasaFeatured.TABLE_NAME, values, finalWhere,
+                                selectionArgs);
+                break;
+            }
+        }
+        return count;
+    }
+
+    /**
+     * SQLite Database holding URLs retrieved from the Internet feed. BaseColumns adds a couple of
+     * properties that ListView relies on: particularly the _ID column, a monotonically increasing
+     * unique integer used to index the table.
+     */
+    public static class PicasaFeatured implements BaseColumns {
+
+        private static final String DATABASE_NAME = "PicasaFavesDB";
+        private static final int DATABASE_VERSION = 2;
+
+        // SQL table name
+        public static final String TABLE_NAME = "PicasaFeatured";
+
+        // SQL table column names
+        public static final String IMAGE_THUMB_URL = "thumbURL";
+        public static final String IMAGE_URL = "imageURL";
+
+        /**
+         * SQLiteOpenHelper takes care of some of the basics of maintaining the database: Creating,
+         * opening, closing, and updating the tables at the right times.
+         */
+        public static class PicasaContentDBHelper extends SQLiteOpenHelper {
+            PicasaContentDBHelper(Context paramContext) {
+                super(paramContext, DATABASE_NAME, null, DATABASE_VERSION);
+            }
+
+            /**
+             * Creates the underlying database with table name and column names defined above.
+             */
+            @Override
+            public void onCreate(SQLiteDatabase db) {
+                db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + _ID + " INTEGER PRIMARY KEY,"
+                        + IMAGE_THUMB_URL + " TEXT," + IMAGE_URL + " TEXT" + ");");
+            }
+
+            /**
+             * Deletes the old table and recreates database. A more sophisticated application would
+             * convert and transfer records from the old version of the database to the new one.
+             */
+            @Override
+            public void onUpgrade(SQLiteDatabase paramSQLiteDatabase, int paramInt1, int paramInt2) {
+                Log.w(PicasaContentDBHelper.class.getName(), "Migrating database from version "
+                        + paramInt1 + " to " + paramInt2 + ", which destroys all old data.");
+                // Kills the table and existing data
+                paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
+                onCreate(paramSQLiteDatabase);
+            }
+
+            @Override
+            public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+                onUpgrade(db, oldVersion, newVersion);
+            }
+        } // PicasaContentDBHelper
+
+        // These are the rows that we will retrieve.
+        public static final String[] PROJ_LONG_URL = new String[] { 
+                PicasaProvider.PicasaFeatured._ID,
+                PicasaProvider.PicasaFeatured.IMAGE_URL, 
+        };
+    }
+}
diff -BburN Part_3_Final/src/com/example/acamp/dip/PicasaPullParser.java Part_4_Final/src/com/example/acamp/dip/PicasaPullParser.java
--- Part_3_Final/src/com/example/acamp/dip/PicasaPullParser.java	2012-08-15 09:33:10.000000000 +0100
+++ Part_4_Final/src/com/example/acamp/dip/PicasaPullParser.java	2012-08-15 17:26:13.000000000 +0100
@@ -2,12 +2,14 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.util.Vector;
 
 import org.xml.sax.helpers.DefaultHandler;
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlPullParserFactory;
 
+import android.content.ContentValues;
 import android.util.Log;
 
 import com.example.acamp.dip.dummy.DummyContent;
@@ -15,15 +17,14 @@
 public class PicasaPullParser extends DefaultHandler {
     private static final String CONTENT = "media:content";
     private static final String ITEM = "item";
-//    private static final int NUM_IMAGES = 100;
     private static final String THUMBNAIL = "media:thumbnail";
-//    private static ContentValues mImage;
-//    private Vector<ContentValues> mImages;
     private static final String LOG_TAG = "PPP";
+    private static ContentValues mImage;
+    private Vector<ContentValues> mImages;
 
-//    public Vector<ContentValues> getImages() {
-//        return this.mImages;
-//    }
+    public Vector<ContentValues> getImages() {
+        return this.mImages;
+    }
     
     public void parseXml(InputStream paramInputStream)
             throws XmlPullParserException, IOException {
@@ -37,7 +38,7 @@
         int j = 1;
         if (i != 0)
             return;
-//        this.mImages = new Vector<ContentValues>(NUM_IMAGES);
+        this.mImages = new Vector<ContentValues>(Constants.NUM_LINES);
         while (true) {
             int k = localXmlPullParser.next();
             if (Thread.currentThread().isInterrupted())
@@ -52,7 +53,7 @@
                     if ( Constants.LOGV ) {
                         Log.d(LOG_TAG, "ITEM");
                     }
-//                    mImage = new ContentValues();
+                    mImage = new ContentValues();
                 } else {
                     String key;
                     if (str1.equalsIgnoreCase(CONTENT)) {
@@ -71,7 +72,7 @@
                     String value = localXmlPullParser.getAttributeValue(null, "url");
                     if (value == null)
                         break;
-//                    mImage.put(key, value);
+                    mImage.put(key, value);
                     if (key.equals(Constants.IMAGE_URL)) {
                         DummyContent.addItem("Image " + j, value);                        
                     }
@@ -79,10 +80,10 @@
             }
             else if ((k == XmlPullParser.END_TAG)
                     && (localXmlPullParser.getName().equalsIgnoreCase(ITEM))
-//                    && (mImage != null)
+                    && (mImage != null)
                     ) {
-//                this.mImages.add(mImage);
-//                mImage = null;
+                this.mImages.add(mImage);
+                mImage = null;
                 j++;
             }
         }
diff -BburN Part_3_Final/src/com/example/acamp/dip/dummy/DummyContent.java Part_4_Final/src/com/example/acamp/dip/dummy/DummyContent.java
--- Part_3_Final/src/com/example/acamp/dip/dummy/DummyContent.java	2012-08-15 09:33:10.000000000 +0100
+++ Part_4_Final/src/com/example/acamp/dip/dummy/DummyContent.java	2012-08-15 17:26:13.000000000 +0100
@@ -34,10 +34,6 @@
         }
     }
 
-    public static final String PREFS_GROUP = "DummyPrefs";
-    public static final String LAST_ITEM_KEY = "ItemId";
-    public static final String ACTION_UPDATE = "com.example.acamp.fivewhat.dummy.update";
-    
     public static List<DummyItem> ITEMS = new ArrayList<DummyItem>();
     public static Map<String, DummyItem> ITEM_MAP = new HashMap<String, DummyItem>();
 
